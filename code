import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error
import matplotlib.pyplot as plt
import seaborn as sns

# Load dataset
file_path = 'synthetic_taxi_fare.csv' 
df = pd.read_csv(file_path, nrows=100000)  

# Display the first few rows
print(df.head())

# Check for missing values
print(df.isnull().sum())

# Drop rows with missing values
df = df.dropna()

# Convert pickup_datetime to datetime format
df['pickup_datetime'] = pd.to_datetime(df['pickup_datetime'])

# Extract useful datetime features
df['hour'] = df['pickup_datetime'].dt.hour
df['day'] = df['pickup_datetime'].dt.day
df['month'] = df['pickup_datetime'].dt.month
df['year'] = df['pickup_datetime'].dt.year
df['day_of_week'] = df['pickup_datetime'].dt.dayofweek

# Drop columns that won't be used in the model
df = df.drop(['pickup_datetime'], axis=1)

# Display the first few rows of the preprocessed data
print(df.head())

# Define features and target
X = df.drop('fare_amount', axis=1)
y = df['fare_amount']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize the model with 100 trees
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)

# Train the model
rf_model.fit(X_train, y_train)

# Make predictions
y_pred = rf_model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
mae = mean_absolute_error(y_test, y_pred)

print(f'Mean Squared Error: {mse}')
print(f'R^2 Score: {r2}')
print(f'Mean Absolute Error: {mae}')

# Plot the predictions vs actual values with different colors
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_test, color='blue', label='Actual Fares')
plt.scatter(y_test, y_pred, color='red', label='Predicted Fares', alpha=0.5)
plt.xlabel('Actual Fares')
plt.ylabel('Predicted Fares')
plt.title('Actual vs Predicted Fares')
plt.legend()
plt.show()
